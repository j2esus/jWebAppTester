
#WebAppTester: Tester for online forms
#This program uses Selenium to open a web browser and run user written commands.
#Download Selenium controllers for your favorite browser (check your browser version)
#from https://www.selenium.dev/downloads/ and save it in the same folder with the program.
#Every line starting with #, is ignored.
#This program builds a tree the folder "scripts" and subfolders.
#The tree is composed of folders and actions in every txt file.
#If there is a file _start.txt, that file will be read and executed before proceeding to any other action in that folder.
#If there is a file _end.txt, that file will be read and executed after any other action in that folder.
#
#Folder Tree Examples
#[scripts]
#scripts/_start.txt
#scripts/_end.txt
#[scripts/management]
#scripts/management/_start.txt
#scripts/management/crearpregunta.txt
#scripts/management/listarpreguntas.txt
#
#If you request the execution of the command "scripts/management/listarpreguntas", the program will run these 
#commands in order:
#scripts/_start.txt
#scripts/management/_start.txt
#scripts/management/listarpreguntas.txt
#scripts/_end.txt
#
#The files _start.txt and _end.txt are not mandatory: they are justa a way to automate actions as authentication
#prior to work with a page or execute a logout after using a given page
#
#Every action is a set of instructions to be executed by your web browser.
#each instruction has the format "action={command}"
#[Supported actions]
#Uncomment examples below to activate them
#go - Opens a web page. 
#Example:
#go={https://duckduckgo.com/}
#wait - Waits for a page to be completely loaded after a change in the location bar URL, or after clicking any element.
#The browser will wait until a given object (given its selector), appear or simply the page to be fully loaded
#Examples:
#wait={}
#wait={
#  "selector":"#duckbar"
#}
#write - Writes text in a page component given its css selector.
#-selector: the css selector of the component to write on
#-text: the text to write
#Example:
#write={
# "selector":"#search_form_input_homepage",
# "text":"inicio"
#}
#You can specify special commands (ALT, F1,ENTER, ESCAPE, etc)
#using this format:
#[%Keys.CONTROL]
#The full list of supported constants can be found in https://www.selenium.dev/selenium/docs/api/java/org/openqa/selenium/Keys.html
#If you need to send command combinations, you can write using this format:
#[%Keys.CONTROL,Keys.ALT]
#You can also add non-commands characters, like this:
#[%Keys.CONTROL,Keys.ALT]r
#Example:
#write={
# "selector":"#search_form_input_homepage",
# "text":"[%Keys.CONTROL,Keys.ALT]r"
#}
#If you need to write the text "[%", instead write "[%%"
#
#click - Clicks a componente of the page given a css selector
#Example:
#click={ 
#  "selector":"#search_button_homepage"
#}
#double click - Double-clicks any element in the page, given its selector.
#Example:
#double click={
#    "selector": "body"
#}
#right click - Right clicks any element in the page, given its selector.
#Example:
#right click={
#    "selector": "#Identificacion"
#}
#
#pause - Waits a given time, before proceeding with the next instruction.
#Format: NUMBER UNITS
#Where UNITS can be one of these values: S=milliseconds,s=seconds, m=minutes, h=hours, d=days
#Example:
#To wait three seconds
#pause={"time":"3 s"}
#To wait 10 minutes
#pause={"time":"10 m"}
#
#pick choice - Prompts user to pick a single choice among a list, stores selected
#option in a variable.
#Properties:
#- selector: Required. This selector must match to a collection of HTML elements</ol>
#- subselector: Secondary css path, to specify the element of every option to be shown
# to the user. By default, the text of every element gathered with the "selector" 
# will be used as option.
#- variable: Required. Name of the variable used to store user's selection.
#- title: Title for the promtpt window
#- message: Message to use in the prompt window.
#- sorted: Sort options alphabetically? (yes/no)
#
#Example:
#pick choice={
# "selector":"div.central-featured-lang",
# "subselector": "a",
# "sorted":"yes",
# "title":"Wikipedia",
# "message":"Select a language",
# "variable":"Language"
#}
#
#Variables
#
#Use existing variables inside your instructions writing the variable's name between square brackets
#like this: [:VARIABLE_NOMBRE]
#
#Example:
#
#click={
# "selector":"[:Language] > a"
#}
#
# About CSS Selectors: 
# https://www.w3.org/wiki/CSS/Selectors
# https://www.w3schools.com/cssref/css_selectors.asp